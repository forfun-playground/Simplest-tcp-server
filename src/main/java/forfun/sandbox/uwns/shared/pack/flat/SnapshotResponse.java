// automatically generated by the FlatBuffers compiler, do not modify

package forfun.sandbox.uwns.shared.pack.flat;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class SnapshotResponse extends Table {
  public static SnapshotResponse getRootAsSnapshotResponse(ByteBuffer _bb) { return getRootAsSnapshotResponse(_bb, new SnapshotResponse()); }
  public static SnapshotResponse getRootAsSnapshotResponse(ByteBuffer _bb, SnapshotResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public SnapshotResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float radius() { int o = __offset(4); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public Actor targets(int j) { return targets(new Actor(), j); }
  public Actor targets(Actor obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o) + j * 16, bb) : null; }
  public int targetsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public Agent players(int j) { return players(new Agent(), j); }
  public Agent players(Agent obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o) + j * 28, bb) : null; }
  public int playersLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public Agent nonPlayers(int j) { return nonPlayers(new Agent(), j); }
  public Agent nonPlayers(Agent obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o) + j * 28, bb) : null; }
  public int nonPlayersLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }

  public static int createSnapshotResponse(FlatBufferBuilder builder,
      float radius,
      int targetsOffset,
      int playersOffset,
      int non_playersOffset) {
    builder.startObject(4);
    SnapshotResponse.addNonPlayers(builder, non_playersOffset);
    SnapshotResponse.addPlayers(builder, playersOffset);
    SnapshotResponse.addTargets(builder, targetsOffset);
    SnapshotResponse.addRadius(builder, radius);
    return SnapshotResponse.endSnapshotResponse(builder);
  }

  public static void startSnapshotResponse(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addRadius(FlatBufferBuilder builder, float radius) { builder.addFloat(0, radius, 0.0f); }
  public static void addTargets(FlatBufferBuilder builder, int targetsOffset) { builder.addOffset(1, targetsOffset, 0); }
  public static void startTargetsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(16, numElems, 4); }
  public static void addPlayers(FlatBufferBuilder builder, int playersOffset) { builder.addOffset(2, playersOffset, 0); }
  public static void startPlayersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(28, numElems, 4); }
  public static void addNonPlayers(FlatBufferBuilder builder, int nonPlayersOffset) { builder.addOffset(3, nonPlayersOffset, 0); }
  public static void startNonPlayersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(28, numElems, 4); }
  public static int endSnapshotResponse(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

